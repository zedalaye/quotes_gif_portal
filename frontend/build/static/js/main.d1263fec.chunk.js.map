{"version":3,"sources":["assets/twitter-logo.svg","App.js","index.js"],"names":["TWITTER_HANDLE","TWITTER_LINK","MY_TWITTER_HANDLE","MY_TWITTER_LINK","SystemProgram","web3","Keypair","arr","Object","values","kp","_keypair","secretKey","secret","Uint8Array","baseAccount","fromSecretKey","programID","PublicKey","idl","metadata","address","cluster","network","clusterApiUrl","opts","App","useState","walletAddress","setWalletAddress","inputValue","setInputValue","gifList","setGifList","checkIfWalletIsConnected","a","window","solana","isPhantom","console","log","connect","onlyIfTrusted","response","publicKey","toString","alert","error","connectWallet","onInputChange","event","value","target","getProvider","connection","Connection","Provider","createGifAccount","provider","program","Program","rpc","startStuffOff","accounts","user","wallet","systemProgram","programId","signers","getGifList","account","fetch","sendGif","length","addGif","upVote","preventDefault","index","BN","downVote","useEffect","addEventListener","className","onClick","type","placeholder","onChange","map","item","src","gifLink","alt","href","userAddress","rel","votes","twitterLogo","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.d1263fec.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/twitter-logo.d89d9a86.svg\";","import { useEffect, useState } from 'react';\nimport twitterLogo from './assets/twitter-logo.svg';\nimport './App.css';\nimport { Connection, PublicKey, clusterApiUrl} from '@solana/web3.js';\nimport {\n  Program, Provider, BN, web3\n} from '@project-serum/anchor';\n\nimport idl from \"./idl.json\";\nimport kp from './keypair.json'\n\n// Constants\nconst TWITTER_HANDLE = '_buildspace';\nconst TWITTER_LINK = `https://twitter.com/${TWITTER_HANDLE}`;\nconst MY_TWITTER_HANDLE = 'zedalaye';\nconst MY_TWITTER_LINK = `https://twitter.com/${MY_TWITTER_HANDLE}`;\n\n// SystemProgram is a reference to the Solana runtime!\nconst { SystemProgram, Keypair } = web3;\n\n// Load the keypair for the account that will hold the GIF data.\nconst arr = Object.values(kp._keypair.secretKey);\nconst secret = new Uint8Array(arr);\nconst baseAccount = Keypair.fromSecretKey(secret);\n\n// Get our program's id form the IDL file.\nconst programID = new PublicKey(idl.metadata.address);\n\n// Set our network to devent.\nconst cluster = 'devnet';\nconst network = clusterApiUrl(cluster);\n\n// Control's how we want to acknowledge when a transaction is \"done\".\nconst opts = {\n  preflightCommitment: \"processed\"\n}\n\nconst App = () => {\n\n  // State\n  const [walletAddress, setWalletAddress] = useState(null);\n  const [inputValue, setInputValue] = useState('');\n  const [gifList, setGifList] = useState([]);\n\n  /*\n   * This function holds the logic for deciding if a Phantom Wallet is\n   * connected or not\n   */\n  const checkIfWalletIsConnected = async () => {\n    try {\n      const { solana } = window;\n\n      if (solana && solana.isPhantom) {\n        console.log('Phantom wallet found!');\n\n        const response = await solana.connect({ onlyIfTrusted: true });\n        console.log('Connected with Public Key:', response.publicKey.toString());\n        setWalletAddress(response.publicKey.toString());\n\n      } else {\n        alert('Solana object not found! Get a Phantom Wallet ðŸ‘»');\n      }\n    } catch (error) {\n      console.error(error);\n    }\n  };\n\n  /*\n   * Let's define this method so our code doesn't break.\n   * We will write the logic for this next!\n   */\n  const connectWallet = async () => {\n    const { solana } = window;\n\n    if (solana && solana.isPhantom) {\n      const response = await solana.connect();\n      console.log('Connected with Public Key:', response.publicKey.toString());\n      setWalletAddress(response.publicKey.toString());\n    }\n  };\n\n  const onInputChange = (event) => {\n    const { value } = event.target;\n    setInputValue(value);\n  };\n\n  const getProvider = () => {\n    const connection = new Connection(network, opts.preflightCommitment);\n    const provider = new Provider(\n      connection, window.solana, opts.preflightCommitment,\n    );\n    return provider;\n  }\n\n  /*\n   * We want to render this UI when the user hasn't connected\n   * their wallet to our app yet.\n   */\n  const renderNotConnectedContainer = () => (\n    <button\n      className=\"cta-button connect-wallet-button\"\n      onClick={connectWallet}\n    >\n      Connect to Wallet\n    </button>\n  );\n\n  const renderConnectedContainer = () => {\n    // If we hit this, it means the program account hasn't be initialized.\n    if (gifList === null) {\n      return (\n        <div className=\"connected-container\">\n          <button className=\"cta-button submit-gif-button\" onClick={createGifAccount}>\n            Do one-time initialization for Quotes GIF Program Account\n          </button>\n        </div>\n      )\n    }\n    // Otherwise, we're good! Account exists. User can submit GIFs.\n    else {\n      return (\n        <div className=\"connected-container\">\n          {/* Go ahead and add this input and button to start */}\n          <input type=\"text\" placeholder=\"Enter gif link!\" value={inputValue} onChange={onInputChange} />\n          <button className=\"cta-button submit-gif-button\" onClick={sendGif}>Submit</button>\n          <div className=\"gif-grid\">\n            {gifList.map((item, index) => (\n              <div className=\"gif-item\" key={index}>\n                <img src={item.gifLink} alt={`gif-${index}`} />\n                <a href={`https://explorer.solana.com/address/${item.userAddress.toString()}?cluster=${cluster}`}\n                   target=\"_blank\"\n                   rel=\"noreferrer\"\n                >{item.userAddress.toString()}</a>\n\n                <div className=\"vote\">\n                  <span className=\"vote-counter\">{item.votes.toString()} votes</span>\n                  <button className=\"vote-button vote-up-button\" onClick={upVote} value={index}>+1</button>\n                  <button className=\"vote-button vote-down-button\" onClick={downVote} value={index}>-1</button>\n                </div>\n              </div>\n            ))}\n          </div>\n        </div>\n      )\n    }\n  };\n\n  const createGifAccount = async () => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      await program.rpc.startStuffOff({\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n          systemProgram: SystemProgram.programId,\n        },\n        signers: [baseAccount]\n      });\n      console.log(\"Created a new BaseAccount w/ address:\", baseAccount.publicKey.toString());\n      await getGifList();\n    }\n    catch(error) {\n      console.log(\"Error creating BaseAccount account:\", error);\n    }\n  }\n\n  const getGifList = async() => {\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n      const account = await program.account.baseAccount.fetch(baseAccount.publicKey);\n\n      console.log(\"Got the account\", account);\n      setGifList(account.gifList);\n\n    } catch (error) {\n      console.log(\"Error in getGifs: \", error);\n      setGifList(null);\n    }\n  }\n\n  const sendGif = async () => {\n    if (inputValue.length === 0) {\n      console.log(\"No GIF link given!\");\n      return;\n    }\n    console.log('GIF link:', inputValue);\n    try {\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.addGif(inputValue, {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n          user: provider.wallet.publicKey,\n        },\n      });\n      console.log(\"GIF successfully sent to program\", inputValue);\n\n      await getGifList();\n    } catch (error) {\n      console.error(\"Error sending GIF:\", error);\n    }\n  };\n\n  const upVote = async (event) => {\n    try {\n      event.preventDefault();\n\n      const target = event.target;\n      const index = target.value;\n\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.upVote(new BN(index), {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n        },\n      });\n      console.log(\"Upvote successfully sent to program\", index);\n\n      await getGifList();\n    } catch (error) {\n      console.error(\"Error sending up vote: \", error);\n    }\n  };\n\n  const downVote = async (event) => {\n    try {\n      event.preventDefault();\n\n      const target = event.target;\n      const index = target.value;\n\n      const provider = getProvider();\n      const program = new Program(idl, programID, provider);\n\n      await program.rpc.downVote(new BN(index), {\n        accounts: {\n          baseAccount: baseAccount.publicKey,\n        },\n      });\n      console.log(\"Downvote successfully sent to program\", index);\n\n      await getGifList();\n    } catch (error) {\n      console.error(\"Error sending down vote: \", error);\n    }\n  };\n\n  /*\n   * When our component first mounts, let's check to see if we have a connected\n   * Phantom Wallet\n   */\n  useEffect(() => {\n    window.addEventListener('load', async (event) => {\n      await checkIfWalletIsConnected();\n    });\n  }, []);\n\n  useEffect(() => {\n    if (walletAddress) {\n      console.log('Fetching GIF list...');\n      getGifList();\n    }\n  }, [walletAddress]);\n\n  return (\n    <div className=\"App\">\n      {/* This was solely added for some styling fanciness */}\n\t\t\t<div className={walletAddress ? 'authed-container' : 'container'}>\n        <div className=\"container\">\n          <div className=\"header-container\">\n            <p className=\"header\">ðŸ–¼ Kaamelott Quotes GIF Portal</p>\n            <p className=\"sub-text\">\n              View your Kaamelott Quotes GIF collection in the metaverse âœ¨\n            </p>\n            {/* Render your connect to wallet button right here */}\n            {!walletAddress && renderNotConnectedContainer()}\n            {/* Render the GIF collection if wallet is connected */}\n            {walletAddress && renderConnectedContainer()}\n          </div>\n\n          <div className=\"footer-container\">\n            <img alt=\"Twitter Logo\" className=\"twitter-logo\" src={twitterLogo} />\n            <span className=\"footer-text\">built on <a\n              href={TWITTER_LINK}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >{`@${TWITTER_HANDLE}`}</a> by <a\n              href={MY_TWITTER_LINK}\n              target=\"_blank\"\n              rel=\"noreferrer\"\n            >{`@${MY_TWITTER_HANDLE}`}</a>\n            </span>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}